/*
 * This file is generated by jOOQ.
 */
package org.example.final_project_jp.infrastructure.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.example.final_project_jp.infrastructure.jooq.generated.tables.Posts;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.pojos.PostsDto;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.records.PostsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostsDao extends DAOImpl<PostsRecord, PostsDto, Integer> {

    /**
     * Create a new PostsDao without any configuration
     */
    public PostsDao() {
        super(Posts.POSTS, PostsDto.class);
    }

    /**
     * Create a new PostsDao with an attached configuration
     */
    public PostsDao(Configuration configuration) {
        super(Posts.POSTS, PostsDto.class, configuration);
    }

    @Override
    public Integer getId(PostsDto object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PostsDto> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Posts.POSTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<PostsDto> fetchById(Integer... values) {
        return fetch(Posts.POSTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public PostsDto fetchOneById(Integer value) {
        return fetchOne(Posts.POSTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<PostsDto> fetchOptionalById(Integer value) {
        return fetchOptional(Posts.POSTS.ID, value);
    }

    /**
     * Fetch records that have <code>userid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PostsDto> fetchRangeOfUserid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Posts.POSTS.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<PostsDto> fetchByUserid(String... values) {
        return fetch(Posts.POSTS.USERID, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PostsDto> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Posts.POSTS.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<PostsDto> fetchByContent(String... values) {
        return fetch(Posts.POSTS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PostsDto> fetchRangeOfDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Posts.POSTS.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<PostsDto> fetchByDate(LocalDateTime... values) {
        return fetch(Posts.POSTS.DATE, values);
    }
}
