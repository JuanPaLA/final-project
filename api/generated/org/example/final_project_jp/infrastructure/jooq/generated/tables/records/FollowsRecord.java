/*
 * This file is generated by jOOQ.
 */
package org.example.final_project_jp.infrastructure.jooq.generated.tables.records;


import org.example.final_project_jp.infrastructure.jooq.generated.tables.Follows;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.pojos.FollowsDto;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FollowsRecord extends UpdatableRecordImpl<FollowsRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.follows.id</code>.
     */
    public FollowsRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.follows.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.follows.followee</code>.
     */
    public FollowsRecord setFollowee(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.follows.followee</code>.
     */
    public String getFollowee() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.follows.follower</code>.
     */
    public FollowsRecord setFollower(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.follows.follower</code>.
     */
    public String getFollower() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Follows.FOLLOWS.ID;
    }

    @Override
    public Field<String> field2() {
        return Follows.FOLLOWS.FOLLOWEE;
    }

    @Override
    public Field<String> field3() {
        return Follows.FOLLOWS.FOLLOWER;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFollowee();
    }

    @Override
    public String component3() {
        return getFollower();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFollowee();
    }

    @Override
    public String value3() {
        return getFollower();
    }

    @Override
    public FollowsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public FollowsRecord value2(String value) {
        setFollowee(value);
        return this;
    }

    @Override
    public FollowsRecord value3(String value) {
        setFollower(value);
        return this;
    }

    @Override
    public FollowsRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FollowsRecord
     */
    public FollowsRecord() {
        super(Follows.FOLLOWS);
    }

    /**
     * Create a detached, initialised FollowsRecord
     */
    public FollowsRecord(Integer id, String followee, String follower) {
        super(Follows.FOLLOWS);

        setId(id);
        setFollowee(followee);
        setFollower(follower);
    }

    /**
     * Create a detached, initialised FollowsRecord
     */
    public FollowsRecord(FollowsDto value) {
        super(Follows.FOLLOWS);

        if (value != null) {
            setId(value.getId());
            setFollowee(value.getFollowee());
            setFollower(value.getFollower());
        }
    }
}
