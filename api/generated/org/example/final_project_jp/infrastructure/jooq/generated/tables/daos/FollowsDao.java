/*
 * This file is generated by jOOQ.
 */
package org.example.final_project_jp.infrastructure.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.example.final_project_jp.infrastructure.jooq.generated.tables.Follows;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.pojos.FollowsDto;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.records.FollowsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FollowsDao extends DAOImpl<FollowsRecord, FollowsDto, Integer> {

    /**
     * Create a new FollowsDao without any configuration
     */
    public FollowsDao() {
        super(Follows.FOLLOWS, FollowsDto.class);
    }

    /**
     * Create a new FollowsDao with an attached configuration
     */
    public FollowsDao(Configuration configuration) {
        super(Follows.FOLLOWS, FollowsDto.class, configuration);
    }

    @Override
    public Integer getId(FollowsDto object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<FollowsDto> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Follows.FOLLOWS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<FollowsDto> fetchById(Integer... values) {
        return fetch(Follows.FOLLOWS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public FollowsDto fetchOneById(Integer value) {
        return fetchOne(Follows.FOLLOWS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<FollowsDto> fetchOptionalById(Integer value) {
        return fetchOptional(Follows.FOLLOWS.ID, value);
    }

    /**
     * Fetch records that have <code>followee BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<FollowsDto> fetchRangeOfFollowee(String lowerInclusive, String upperInclusive) {
        return fetchRange(Follows.FOLLOWS.FOLLOWEE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>followee IN (values)</code>
     */
    public List<FollowsDto> fetchByFollowee(String... values) {
        return fetch(Follows.FOLLOWS.FOLLOWEE, values);
    }

    /**
     * Fetch records that have <code>follower BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<FollowsDto> fetchRangeOfFollower(String lowerInclusive, String upperInclusive) {
        return fetchRange(Follows.FOLLOWS.FOLLOWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>follower IN (values)</code>
     */
    public List<FollowsDto> fetchByFollower(String... values) {
        return fetch(Follows.FOLLOWS.FOLLOWER, values);
    }
}
