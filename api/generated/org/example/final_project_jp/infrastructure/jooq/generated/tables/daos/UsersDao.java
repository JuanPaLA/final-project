/*
 * This file is generated by jOOQ.
 */
package org.example.final_project_jp.infrastructure.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.example.final_project_jp.infrastructure.jooq.generated.tables.Users;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.pojos.UsersDto;
import org.example.final_project_jp.infrastructure.jooq.generated.tables.records.UsersRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, UsersDto, Integer> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, UsersDto.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, UsersDto.class, configuration);
    }

    @Override
    public Integer getId(UsersDto object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersDto> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UsersDto> fetchById(Integer... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UsersDto fetchOneById(Integer value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UsersDto> fetchOptionalById(Integer value) {
        return fetchOptional(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersDto> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UsersDto> fetchByName(String... values) {
        return fetch(Users.USERS.NAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersDto> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UsersDto> fetchByPassword(String... values) {
        return fetch(Users.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>session_token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UsersDto> fetchRangeOfSessionToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.SESSION_TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>session_token IN (values)</code>
     */
    public List<UsersDto> fetchBySessionToken(String... values) {
        return fetch(Users.USERS.SESSION_TOKEN, values);
    }
}
